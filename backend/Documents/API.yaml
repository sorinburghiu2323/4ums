openapi: 3.0.0
info:
  title: API
  version: '1.0'
  contact:
    name: Group D Team
  description: ''
servers:
  - url: 'http://localhost:8000/api'
paths:
  /users:
    post:
      summary: ''
      operationId: post-users
      responses:
        '201':
          description: Created - User created.
        '400':
          description: 'Bad Request - {description of why the request is bad}'
      description: Register a user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: Unique.
                email:
                  type: string
                  description: Unique.
                first_name:
                  type: string
                last_name:
                  type: string
                password:
                  type: string
                password_repeat:
                  type: string
                is_teacher:
                  type: boolean
                  description: Bool to whether the user is applied for a teacher's account.
              required:
                - username
                - email
                - first_name
                - last_name
                - password
                - is_teacher
                - password_repeat
  /login:
    post:
      summary: ''
      operationId: post-login
      responses:
        '200':
          description: OK - Logged in.
        '400':
          description: 'Bad Request - {description of why the request is bad}'
        '404':
          description: Not Found - User does not exist.
      description: Login a user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
  /logout:
    post:
      summary: ''
      operationId: post-logout
      responses:
        '200':
          description: OK - Logged out.
      description: Logout the user.
  '/communities/{id}/posts':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    post:
      summary: ''
      operationId: post-create_post
      responses:
        '201':
          description: 'Created post '
          headers: {}
        '400':
          description: 'Bad Request - {description of why the request is bad}'
        '401':
          description: Unauthorized User
        '404':
          description: Not Found - Community not found
      description: Provides an endpoint to create a post in a specific community
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                post_type:
                  type: string
              required:
                - title
                - description
                - post_type
          application/xml:
            schema:
              type: object
              properties: {}
        description: ''
      parameters: []
    get:
      summary: ''
      operationId: get-community-id
      responses:
        '200':
          description: OK- Posts have been sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  previous_page:
                    type: string
                  next_page:
                    type: string
                  page_data:
                    type: string
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      description: Provides an endpoint to view all posts in the current commmunity with pagination
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                page_number:
                  type: integer
          application/xml:
            schema:
              type: object
              properties: {}
        description: Returns the json data with the previous page the next page and the data for the current page
  /users/feed:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_pages:
                    type: integer
                  previous_page:
                    type: integer
                  data:
                    $ref: '#/components/schemas/Post'
                  next_page:
                    type: integer
                required:
                  - total_pages
                  - data
        '401':
          description: Unauthorized - Login required.
      operationId: get-users-feed
      description: |-
        Get the feed posts for the logged in user.

        Pagination included: Every page has 20 posts.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                page:
                  type: integer
        description: |-
          If page is not specified, it is assumed first page.
          If page is bigger than 'total_pages', last page is returned.
  /communities:
    post:
      summary: ''
      operationId: post-community
      responses:
        '201':
          description: Community Created
        '400':
          description: Bad Request - Name and description are required
        '401':
          description: Unauthorized - Login required
        '409':
          description: Conflict - Name is already in use
      description: Create a new community
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
              required:
                - name
                - description
        description: "'name' is the name of the community to be created, 'description' is a description of the community to be created."
    parameters: []
components:
  schemas:
    Post:
      title: Post
      type: object
      properties:
        id:
          type: integer
        community:
          $ref: '#/components/schemas/CommunitySimple'
        user:
          $ref: '#/components/schemas/UserSimple'
        title:
          type: string
        description:
          type: string
        post_type:
          type: string
          description: 'Either "discussion" or "questions".'
        created_at:
          type: string
        likes_num:
          type: integer
          description: Number of likes.
        comments_num:
          type: integer
          description: Number of comments.
        is_community_owner:
          type: boolean
          description: True if the creator of the post is the community owner.
      required:
        - id
        - community
        - user
        - title
        - description
        - post_type
        - created_at
        - likes_num
        - comments_num
        - is_community_owner
      description: Post serializer for standard display of Posts.
    CommunitySimple:
      title: CommunitySimple
      type: object
      description: Simple community serializer.
      properties:
        id:
          type: integer
        name:
          type: string
      required:
        - id
        - name
    UserSimple:
      title: UserSimple
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        points:
          type: integer
        is_teacher:
          type: boolean
      required:
        - id
        - username
        - points
        - is_teacher
      description: Simple user serializer
